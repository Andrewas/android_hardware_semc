diff --git a/audio/AudioPolicyCompatClient.cpp b/audio/AudioPolicyCompatClient.c
index 162968c..f6e67b6 100644
--- a/audio/AudioPolicyCompatClient.cpp
+++ b/audio/AudioPolicyCompatClient.cpp
@@ -74,6 +74,21 @@ audio_io_handle_t AudioPolicyCompatClient::openInput(audio_mo
                                                      audio_devices_t *pDevices,
                                                      uint32_t *pSamplingRate,
                                                      audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                                     audio_channel_mask_t *pCha
+                                                     audio_input_clients *pInpu
+{
+    return mServiceOps->open_input_on_module(mService, module, pDevices,
+                                             pSamplingRate, pFormat, pChannelMa
+}
+
+status_t AudioPolicyCompatClient::closeInput(audio_io_handle_t input,
+                                            audio_input_clients *inputClientId)
+{
+    return mServiceOps->close_input(mService, input, inputClientId);
+}
+
+#else
                                                      audio_channel_mask_t *pCha
 {
     return mServiceOps->open_input_on_module(mService, module, pDevices,
@@ -84,6 +99,7 @@ status_t AudioPolicyCompatClient::closeInput(audio_io_handle_t
 {
     return mServiceOps->close_input(mService, input);
 }
+#endif
 
 status_t AudioPolicyCompatClient::setStreamOutput(AudioSystem::stream_type stre
                                              audio_io_handle_t output)
diff --git a/audio/AudioPolicyCompatClient.h b/audio/AudioPolicyCompatClient.h
index 494c8af..afc20ee 100644
--- a/audio/AudioPolicyCompatClient.h
+++ b/audio/AudioPolicyCompatClient.h
@@ -54,8 +54,15 @@ public:
                                         audio_devices_t *pDevices,
                                         uint32_t *pSamplingRate,
                                         audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                        audio_channel_mask_t *pChannelMask,
+                                        audio_input_clients *pInputClientId = N
+    virtual status_t closeInput(audio_io_handle_t input,
+                                audio_input_clients *inputClientId = NULL);
+#else
                                         audio_channel_mask_t *pChannelMask);
     virtual status_t closeInput(audio_io_handle_t input);
+#endif
     virtual status_t setStreamOutput(AudioSystem::stream_type stream, audio_io_
     virtual status_t moveEffects(int session,
                                  audio_io_handle_t srcOutput,
diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index fdf0ca8..1d4b019 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -912,7 +912,12 @@ audio_io_handle_t AudioPolicyManagerBase::getInput(int inpu
                                     uint32_t samplingRate,
                                     uint32_t format,
                                     uint32_t channelMask,
+#ifdef STE_AUDIO
+                                    AudioSystem::audio_in_acoustics acoustics,
+                                    audio_input_clients *inputClientId)
+#else
                                     AudioSystem::audio_in_acoustics acoustics)
+#endif
 {
     audio_io_handle_t input = 0;
     audio_devices_t device = getDeviceForInputSource(inputSource);
@@ -968,7 +973,12 @@ audio_io_handle_t AudioPolicyManagerBase::getInput(int inpu
                                     &inputDesc->mDevice,
                                     &inputDesc->mSamplingRate,
                                     &inputDesc->mFormat,
+#ifdef STE_AUDIO
+                                    &inputDesc->mChannelMask,
+                                    inputClientId);
+#else
                                     &inputDesc->mChannelMask);
+#endif
 
     // only accept input with the exact requested set of parameters
     if (input == 0 ||
diff --git a/audio/audio_policy_hal.cpp b/audio/audio_policy_hal.cpp
index 545d177..bbda520 100644
--- a/audio/audio_policy_hal.cpp
+++ b/audio/audio_policy_hal.cpp
@@ -177,11 +177,20 @@ static audio_io_handle_t ap_get_input(struct audio_policy 
                                       uint32_t sampling_rate,
                                       audio_format_t format,
                                       audio_channel_mask_t channelMask,
+#ifdef STE_AUDIO
+                                      audio_in_acoustics_t acoustics,
+                                      audio_input_clients *inputClientId)
+#else
                                       audio_in_acoustics_t acoustics)
+#endif
 {
     struct legacy_audio_policy *lap = to_lap(pol);
     return lap->apm->getInput((int) inputSource, sampling_rate, (int) format, c
+#ifdef STE_AUDIO
+                              (AudioSystem::audio_in_acoustics)acoustics, input
+#else
                               (AudioSystem::audio_in_acoustics)acoustics);
+#endif
 }
 
 static int ap_start_input(struct audio_policy *pol, audio_io_handle_t input)
diff --git a/include/hardware_legacy/AudioPolicyInterface.h b/include/hardware_l
index 7847bdd..b82de09 100644
--- a/include/hardware_legacy/AudioPolicyInterface.h
+++ b/include/hardware_legacy/AudioPolicyInterface.h
@@ -112,7 +112,12 @@ public:
                                     uint32_t samplingRate = 0,
                                     uint32_t Format = AudioSystem::FORMAT_DEFAU
                                     uint32_t channels = 0,
+#ifdef STE_AUDIO
+                                    AudioSystem::audio_in_acoustics acoustics =
+                                    audio_input_clients *inputClientId = NULL) 
+#else
                                     AudioSystem::audio_in_acoustics acoustics =
+#endif
     // indicates to the audio policy manager that the input starts being used.
     virtual status_t startInput(audio_io_handle_t input) = 0;
     // indicates to the audio policy manager that the input stops being used.
@@ -219,9 +224,16 @@ public:
                                         audio_devices_t *pDevices,
                                         uint32_t *pSamplingRate,
                                         audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                        audio_channel_mask_t *pChannelMask,
+                                        audio_input_clients *pInputClientId = N
+    // closes an audio input
+    virtual status_t closeInput(audio_io_handle_t input, audio_input_clients *p
+#else
                                         audio_channel_mask_t *pChannelMask) = 0
     // closes an audio input
     virtual status_t closeInput(audio_io_handle_t input) = 0;
+#endif
     //
     // misc control functions
     //
diff --git a/include/hardware_legacy/AudioPolicyManagerBase.h b/include/hardware
index 5ba09f1..d94e000 100644
--- a/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -106,7 +106,12 @@ public:
                                             uint32_t samplingRate,
                                             uint32_t format,
                                             uint32_t channels,
+#ifdef STE_AUDIO
+                                            AudioSystem::audio_in_acoustics aco
+                                            audio_input_clients *inputClientId 
+#else
                                             AudioSystem::audio_in_acoustics aco
+#endif
 
         // indicates to the audio policy manager that the input starts being us
         virtual status_t startInput(audio_io_handle_t input);
diff --git a/include/hardware_legacy/AudioSystemLegacy.h b/include/hardware_lega
index b0ca0b3..a3f7746 100644
--- a/include/hardware_legacy/AudioSystemLegacy.h
+++ b/include/hardware_legacy/AudioSystemLegacy.h
@@ -65,7 +65,7 @@ enum audio_source {
     AUDIO_SOURCE_CAMCORDER = 5,
     AUDIO_SOURCE_VOICE_RECOGNITION = 6,
     AUDIO_SOURCE_VOICE_COMMUNICATION = 7,
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
     AUDIO_SOURCE_REMOTE_SUBMIX = 8,
     AUDIO_SOURCE_FM_RX = 9,
     AUDIO_SOURCE_FM_RX_A2DP = 10,
@@ -92,8 +92,9 @@ public:
         ENFORCED_AUDIBLE = 7, // Sounds that cannot be muted by user and must b
         DTMF             = 8,
         TTS              = 9,
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
         INCALL_MUSIC     = 10,
+       FM               = 11,
 #endif
         NUM_STREAM_TYPES
     };
@@ -257,7 +258,7 @@ public:
         DEVICE_OUT_AUX_DIGITAL = 0x400,
         DEVICE_OUT_ANLG_DOCK_HEADSET = 0x800,
         DEVICE_OUT_DGTL_DOCK_HEADSET = 0x1000,
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
         DEVICE_OUT_USB_ACCESSORY = 0x2000,
         DEVICE_OUT_USB_DEVICE = 0x4000,
         DEVICE_OUT_FM = 0x8000,
@@ -274,7 +275,7 @@ public:
                 DEVICE_OUT_BLUETOOTH_SCO_CARKIT | DEVICE_OUT_BLUETOOTH_A2DP | D
                 DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER | DEVICE_OUT_AUX_DIGITAL |
                 DEVICE_OUT_ANLG_DOCK_HEADSET | DEVICE_OUT_DGTL_DOCK_HEADSET |
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
                 DEVICE_OUT_USB_ACCESSORY | DEVICE_OUT_USB_DEVICE |
                 DEVICE_OUT_ANC_HEADSET | DEVICE_OUT_ANC_HEADPHONE |
                 DEVICE_OUT_FM | DEVICE_OUT_FM_TX |
@@ -284,12 +285,12 @@ public:
 #endif
         DEVICE_OUT_ALL_A2DP = (DEVICE_OUT_BLUETOOTH_A2DP | DEVICE_OUT_BLUETOOTH
                 DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER),
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
         DEVICE_OUT_ALL_USB = (DEVICE_OUT_USB_ACCESSORY | DEVICE_OUT_USB_DEVICE)
 #endif
 
         // input devices
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
         DEVICE_IN_COMMUNICATION = 0x100000,
         DEVICE_IN_AMBIENT = 0x200000,
         DEVICE_IN_BUILTIN_MIC = 0x400000,
@@ -299,7 +300,11 @@ public:
         DEVICE_IN_VOICE_CALL = 0x4000000,
         DEVICE_IN_BACK_MIC = 0x8000000,
         DEVICE_IN_ANC_HEADSET = 0x10000000,
+#ifdef STE_FM
+       DEVICE_IN_FM_RX = 0x1000000,
+#else
         DEVICE_IN_FM_RX = 0x20000000,
+#endif
         DEVICE_IN_FM_RX_A2DP = 0x40000000,
         DEVICE_IN_DEFAULT = DEVICE_IN_BUILTIN_MIC,
         DEVICE_IN_ANLG_DOCK_HEADSET = 0x80000000,
@@ -318,7 +323,7 @@ public:
 
         DEVICE_IN_ALL = (DEVICE_IN_COMMUNICATION | DEVICE_IN_AMBIENT | DEVICE_I
                 DEVICE_IN_BLUETOOTH_SCO_HEADSET | DEVICE_IN_WIRED_HEADSET | DEV
-#ifdef QCOM_HARDWARE
+#if defined(QCOM_HARDWARE) || defined(STE_FM)
                 DEVICE_IN_VOICE_CALL | DEVICE_IN_BACK_MIC | DEVICE_IN_ANC_HEADS
                 DEVICE_IN_FM_RX | DEVICE_IN_FM_RX_A2DP | DEVICE_IN_DEFAULT |
                 DEVICE_IN_ANLG_DOCK_HEADSET | DEVICE_IN_PROXY)
@@ -361,6 +366,20 @@ public:
         NUM_FORCE_USE
     };
 
+#ifdef STE_AUDIO
+// AUDIO_INPUT_CLIENT_ID_BASE provide a means to refer to client Id´s not expli
+#define AUDIO_INPUT_CLIENT_ID_BASE AUDIO_INPUT_CLIENT_ID1
+
+    enum audio_input_clients {
+        AUDIO_INPUT_CLIENT_ID1 = 0x1,
+        AUDIO_INPUT_CLIENT_ID2 = 0x2,
+        AUDIO_INPUT_CLIENT_ID3 = 0x3,
+        AUDIO_INPUT_CLIENT_ID4 = 0x4,
+        AUDIO_INPUT_CLIENT_PLAYBACK = 0x80000000, // request client of playback
+        AUDIO_INPUT_CLIENT_RECORD = 0x80000001   // request client of recording
+    };
+#endif
+
     //
     // AudioPolicyService interface
     //
